table Historico
	lineageTag: 93119546-1c13-4023-b0ad-da8f8f703b4b

	measure 'conteo_ eventos' = COUNT(Historico[Índice])
		formatString: 0
		lineageTag: 08176c39-7295-4904-a3af-ec01f9c8f966

	measure Detalles_Evento_1 =
			
			VAR IndexEncontrado = 1
			VAR Fecha = CALCULATE(SELECTEDVALUE('Historico'[Fecha_UTC]), 'Historico'[Índice] = IndexEncontrado)
			VAR Hora = CALCULATE(SELECTEDVALUE('Historico'[Hora_UTC]), 'Historico'[Índice] = IndexEncontrado) // <-- Asegúrate de que esta línea esté presente
			VAR Latitud = CALCULATE(SELECTEDVALUE('Historico'[Latitud]), 'Historico'[Índice] = IndexEncontrado)
			VAR Longitud = CALCULATE(SELECTEDVALUE('Historico'[Longitud]), 'Historico'[Índice] = IndexEncontrado)
			VAR Profundidad = CALCULATE(SELECTEDVALUE('Historico'[Profundidad_km]), 'Historico'[Índice] = IndexEncontrado)
			VAR Magnitud = CALCULATE(SELECTEDVALUE('Historico'[Magnitud]), 'Historico'[Índice] = IndexEncontrado)
			VAR TipoMagnitud = CALCULATE(SELECTEDVALUE('Historico'[Tipo_Magnitud]), 'Historico'[Índice] = IndexEncontrado)
			RETURN
			    "Fecha: " & FORMAT(Fecha, "dd/mm/yyyy") & UNICHAR(10) &
			    "Hora: " & FORMAT(Hora, "hh:mm:ss") & UNICHAR(10) & // <-- Asegúrate de que esta línea esté presente
			    "Latitud: " & FORMAT(Latitud, "0.00") & UNICHAR(10) &
			    "Longitud: " & FORMAT(Longitud, "0.00") & UNICHAR(10) &
			    "Profundidad: " & FORMAT(Profundidad, "0") & " km" & UNICHAR(10) &
			    "Magnitud: " & FORMAT(Magnitud, "0.0") & " " & TipoMagnitud
		lineageTag: 67d8ebcd-41bd-4ee4-a85b-f9df33a89e4f

	measure 'Duracion Total Eventos (segundos)' = SUM(datos_eventos_detectados[Duracion_Evento_s])
		formatString: 0
		lineageTag: de3776bd-e636-4680-9873-905f46a2c2e6

	column Fecha_UTC
		dataType: dateTime
		formatString: Long Date
		lineageTag: bf05aa99-1214-482f-9376-0187db6aaef6
		summarizeBy: none
		sourceColumn: Fecha_UTC

		variation Variación
			isDefault
			relationship: f6c0b879-b3c4-47ae-b68f-c94e21fe5570
			defaultHierarchy: LocalDateTable_6be32d23-f54c-470e-9bb8-e51dba9f9df6.'Jerarquía de fechas'

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column Hora_UTC
		dataType: dateTime
		formatString: Long Time
		lineageTag: c9cb1d79-6b2d-4465-93b8-b01ba4034437
		summarizeBy: none
		sourceColumn: Hora_UTC

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Time

	column Latitud
		dataType: double
		lineageTag: cf1c1356-061b-4ca6-a757-e0dfba6d0004
		dataCategory: Latitude
		summarizeBy: none
		sourceColumn: Latitud

		annotation SummarizationSetBy = User

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Longitud
		dataType: double
		lineageTag: a2daec0f-568b-4d00-a71b-473b87e0efa9
		dataCategory: Longitude
		summarizeBy: none
		sourceColumn: Longitud

		annotation SummarizationSetBy = User

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Profundidad_km
		dataType: double
		lineageTag: 0ff22c7c-46e1-44b5-a382-bf63f2c9b971
		summarizeBy: sum
		sourceColumn: Profundidad_km

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Magnitud
		dataType: double
		lineageTag: d78af371-2045-48a8-be2a-28e207276c73
		summarizeBy: sum
		sourceColumn: Magnitud

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Tipo_Magnitud
		dataType: string
		lineageTag: 7986852d-2787-45dc-ad96-b4262a3173eb
		summarizeBy: none
		sourceColumn: Tipo_Magnitud

		annotation SummarizationSetBy = Automatic

	column Índice
		dataType: int64
		formatString: 0
		lineageTag: 94ecd4ce-dbe2-4150-9d8a-8debc2b6c32b
		summarizeBy: none
		sourceColumn: Índice

		annotation SummarizationSetBy = User

	column 'FECHA Y HORA'
		dataType: string
		lineageTag: f84c2dd2-e8d0-4e9c-9ce5-f32b73657420
		summarizeBy: none
		sourceColumn: FECHA Y HORA

		annotation SummarizationSetBy = Automatic

	partition Historico = m
		mode: import
		source = ```
				let
				    Origen = Python.Execute(
				        "import obspy
				from obspy.clients.fdsn import Client
				from obspy import UTCDateTime
				import pandas as pd
				from datetime import datetime
				
				# --- Parámetros de búsqueda ---
				lat_centro = -53.79    # Río Grande
				lon_centro = -67.75
				radio_km = 500         # Radio reducido a 500 km
				
				start_date = UTCDateTime('1949-01-01')
				end_date = UTCDateTime(datetime.utcnow())  # Fecha actual automática
				min_magnitude = 2.0
				
				client = Client('USGS')
				
				try:
				    catalog = client.get_events(
				        starttime=start_date,
				        endtime=end_date,
				        latitude=lat_centro,
				        longitude=lon_centro,
				        maxradius=radio_km / 111.0,
				        minmagnitude=min_magnitude,
				        orderby='time'
				    )
				
				    sismo_data = []
				    for event in catalog:
				        origin = event.origins[0]
				        magnitude = event.magnitudes[0]
				
				        sismo_data.append({
				            'Fecha_UTC': origin.time.date,
				            'Hora_UTC': origin.time.time,
				            'Latitud': float(f'{origin.latitude:.2f}'),    # Mantener como está
				            'Longitud': float(f'{origin.longitude:.2f}'),  # Mantener como está
				            'Profundidad_km': round(origin.depth / 1000, 1) if origin.depth else None,
				            'Magnitud': float(f'{magnitude.mag:.1f}') if magnitude.mag else None,
				            'Tipo_Magnitud': magnitude.magnitude_type if magnitude.magnitude_type else 'N/A',
				            'Id_Evento': event.resource_id.id
				        })
				
				    dataset = pd.DataFrame(sismo_data)
				
				except Exception as e:
				    dataset = pd.DataFrame([{'Error': str(e)}])
				", []),
				
				    dataset1 = Origen{[Name="dataset"]}[Value],
				    
				    // PASO A AGREGAR/MODIFICAR: Transformar Latitud y Longitud CON CULTURA
				    // Primero, asegúrate de que sean tipo texto si no lo son ya, aunque Python generalmente envía números.
				    // Lo crucial es el paso de conversión con la cultura.
				    TipoCambiado = Table.TransformColumnTypes(dataset1, {
				        {"Fecha_UTC", type date}, // Añadido para asegurar el tipo de fecha
				        {"Hora_UTC", type time},  // Añadido para asegurar el tipo de hora
				        {"Profundidad_km", type number}, // Asegura que sea número
				        {"Magnitud", type number}, // Asegura que sea número
				        {"Tipo_Magnitud", type text}, // Asegura que sea texto
				        {"Id_Evento", type text}  // Asegura que sea texto
				    }),
				
				    // ESTE ES EL PASO CLAVE PARA LATITUD Y LONGITUD
				    // Convierte las columnas a número decimal usando una configuración regional que use '.' como separador decimal.
				    // Generalmente, 'en-US' (inglés de Estados Unidos) funciona bien para esto.
				    LatLonNumericoPreciso = Table.TransformColumns(TipoCambiado, {
				        {"Latitud", each Number.FromText(Text.From(_), "en-US"), type number},
				        {"Longitud", each Number.FromText(Text.From(_), "en-US"), type number}
				    }),
				
				    // El paso de ValoresRedondeados original ya no es necesario para Latitud, Longitud y Magnitud
				    // porque el formato se maneja en Python y la conversión de tipo en el paso anterior.
				    // Lo mantenemos por si tienes otras columnas que necesites redondear aquí.
				    ValoresRedondeados = Table.TransformColumns(LatLonNumericoPreciso, {
				        {"Latitud", each _, type number},   // Ya está correcto
				        {"Longitud", each _, type number},  // Ya está correcto
				        {"Magnitud", each _, type number}   // Ya está correcto
				    }),
				    #"Índice agregado" = Table.AddIndexColumn(ValoresRedondeados, "Índice", 1, 1, Int64.Type),
				    #"Columnas quitadas" = Table.RemoveColumns(#"Índice agregado",{"Id_Evento"}),
				    #"Columna combinada insertada" = Table.AddColumn(#"Columnas quitadas", "FECHA Y HORA", each Text.Combine({Text.From([Fecha_UTC], "es-AR"), Text.From([Hora_UTC], "es-AR")}, " "), type text),
				    #"Filas en blanco eliminadas" = Table.SelectRows(#"Columna combinada insertada", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null})))
				in
				    #"Filas en blanco eliminadas"
				```

	annotation PBI_NavigationStepName = Navegación

	annotation PBI_ResultType = Table

